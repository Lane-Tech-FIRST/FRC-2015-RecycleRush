//The code and documentation are both in their beginning stages and this may or may not be representative of the final
//version of the code
package org.usfirst.frc.team4645.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	RobotDrive rb;
    Joystick logitech;
    Talon frontLeft, frontRight, backLeft, backRight;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
		logitech = new Joystick(0);
		frontLeft = new Talon(15);
		frontRight = new Talon(14);
		backLeft = new Talon(0);
		backRight = new Talon(1);
		rb = new RobotDrive(frontLeft, backLeft, frontRight, backRight);
    }
    
    public void autonomousInit() {

    }

    public void teleopInit() {
    	while( isOperatorControl() && isEnabled() )
    	{
    			rb.mecanumDrive_Cartesian(logitech.getX(), logitech.getY(), logitech.getTwist(), 0.0 );
    	}
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
